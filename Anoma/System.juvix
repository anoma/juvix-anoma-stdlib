--- Functions that are or will be provided by the Anoma system.
module Anoma.System;

import Anoma.Data.Maybe open;
import Stdlib.Prelude open;
import Anoma.Types open;
import Anoma.System.Builtin as Builtin;

open Builtin using {anomaGet; anomaEncode; anomaDecode} public;

--- Signs a message with a private key and returns a signed message.
{-# inline: true #-}
anomaSign
  : {Message : Type}
    -- | The message to sign.
    -> Message
    -- | The signing private key.
    -> PrivateKey
    -- | The resulting signed message.
    -> SignedMessage
  | message (PrivateKey.mk privKey) :=
    Builtin.anomaSign message (ByteArray.mk privKey) |> SignedMessage.mk;

--- Signs a message with a private key and returns the signature.
{-# inline: true #-}
anomaSignDetached
  : {Message : Type}
    -- | The message to sign.
    -> Message
    -- | The signing private key.
    -> PrivateKey
    -- The resulting signature
    -> Signature
  | message (PrivateKey.mk privKey) :=
    Builtin.anomaSignDetached message (ByteArray.mk privKey) |> Signature.mk;

--- Verifies a signed message against a public key.
---
--- Arguments:
--- signedMessage : The signed message to verify.
--- publicKey : The signer public key to verify against.
---
--- Returns:
--- ;true; if the signedMessage was verified.
{-# inline: true #-}
anomaVerify (signedMessage : SignedMessage) (publicKey : PublicKey) : Bool :=
  anomaVerifyWithMessage signedMessage publicKey |> isJust {Unit};

--- Verifies a signature against a message and public key.
{-# inline: true #-}
anomaVerifyDetached
  : {Message : Type}
    -- | The signature to verify.
    -> Signature
    -- | The message to verify against.
    -> Message
    -- | The signer public key to verify against.
    -> PublicKey
    -- | The verification result.
    -> Bool
  | (Signature.mk signature) message (PublicKey.mk pubKey) :=
    Builtin.anomaVerifyDetached signature message (ByteArray.mk pubKey);

--- Verifies a signature against a message and public key and return the message on success.
{-# inline: true #-}
anomaVerifyWithMessage
  : {Message : Type}
    -- | The signed message to verify.
    -> SignedMessage
    -- | The signer public key to verify against.
    -> PublicKey
    -- | The original message.
    -> Maybe Message
  | (SignedMessage.mk signedMessage) (PublicKey.mk pubKey) :=
    Builtin.anomaVerifyWithMessage signedMessage (ByteArray.mk pubKey);
