module RawCounterTransaction;

import Anoma.Transaction open;
import Stdlib.Prelude open;
import Anoma.Extra open;
import RawCounterTransaction.Keys open;

open Transaction;
open DeltaComponent;

counterLogic (r : Resource) (tx : Transaction) : Bool :=
  let
    rs : ResourcePartition := partitionResources tx;
  in case
       ResourcePartition.consumed rs
         , ResourcePartition.created rs
     of
       | [old], [new] :=
         if
           -- init counter
           -- TODO should we check for label/kind?
           | Resource.eph old := Resource.data new == 0
           -- increment counter
           | else :=
             -- TODO should we compare for kind equality instead?
                   Resource.label
                   new
                 == Resource.label old
               && Resource.data new == Resource.data old + 1
       | _ := false;

mkCounter (ephemeral : Bool) (n : Nat) : Resource :=
  Resource.mk@{
    logic := counterLogic;
    label := 0;
    quantity := 1;
    data := n;
    eph := ephemeral;
    npk := pubKey;
    nonce := 0;
    rseed := 0
  };

zeroedCounter : Resource := mkCounter false 0;

incrementedCounter : Resource := mkCounter false 1;

dummy : Resource := mkCounter true 666666;

mkCounterTransaction
  (consumed : Resource)
  (created : Resource)
  : Transaction :=
  Transaction.mk@{
    roots := [];
    commitments := [commitment created];
    nullifiers := [nullifier consumed privKey];
    proofs := [consumed; created];
    delta := [];
    extra := 0;
    preference := 0
  };

init (resource : Resource) : Transaction :=
  mkCounterTransaction dummy resource;

update (old new : Resource) : Transaction :=
  mkCounterTransaction old new;

mainHelper (initCase : Bool) : Transaction :=
  if
    | initCase := init zeroedCounter
    | else := update zeroedCounter incrementedCounter;

main : Transaction := mainHelper true;
