module AlwaysValid.Transaction;

import Anoma.Transaction open;
import Stdlib.Prelude open;
import Anoma.Extra open;

open Transaction;
open DeltaComponent;

privKey : Nat :=
  0xddd315c76991f8e058760cacdd19c21bf6a12c72bc229a60ad6aaa314fa07ac11662fc6e7829efcb0f4500827d49bb699af7b5475cef5220fd600ebbf9709a58;

pubKey : Nat :=
  0xddd315c76991f8e058760cacdd19c21bf6a12c72bc229a60ad6aaa314fa07ac1;

alwaysTrueLogic (r : Resource) (tx : Transaction) : Bool :=
  true;

mkResource (n : Nat) : Resource :=
  Resource.mk@{
    logic := alwaysTrueLogic;
    label := 0;
    quantity := n;
    data := 0;
    eph := false;
    npk := pubKey;
    nonce := 0;
    rseed := 0
  };

mkTransaction
  (consumed : Resource)
  (created : Resource)
  : Transaction :=
  Transaction.mk@{
    roots := [];
    commitments := [commitment created];
    nullifiers := [nullifier consumed privKey];
    proofs := [consumed; created];
    delta := [];
    extra := 0;
    preference := 0
  };
