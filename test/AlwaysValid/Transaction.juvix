module AlwaysValid.Transaction;

import Anoma.Transaction open;
import Stdlib.Prelude open;
import Anoma open;

open Transaction;
open DeltaComponent;

import AlwaysValid.Keys open;

alwaysTrueLogic (r : Resource) (tx : Transaction) : Bool := true;

mkResource (n : Nat) : Resource :=
  Resource.mk@{
    logic := alwaysTrueLogic;
    label := 0;
    quantity := n;
    data := 0;
    eph := false;
    npk := pubKey;
    nonce := 0;
    rseed := 0
  };

mkTransaction (consumed : Resource) (created : Resource) : Transaction :=
  Transaction.mk@{
    roots := [];
    commitments := [commitment created];
    nullifiers := [nullifier consumed privKey];
    proofs := [consumed; created];
    complianceProofs := [];
    delta := [];
    extra := 0;
    preference := 0
  };
